// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/grpcexcel.proto

package grpcexcel

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type OneCellValue_ValueType int32

const (
	OneCellValue_NULL     OneCellValue_ValueType = 0
	OneCellValue_STRING   OneCellValue_ValueType = 1
	OneCellValue_DATETIME OneCellValue_ValueType = 2
	OneCellValue_DECIMAL  OneCellValue_ValueType = 3
	OneCellValue_BOOL     OneCellValue_ValueType = 4
	OneCellValue_INT      OneCellValue_ValueType = 5
	OneCellValue_DOUBLE   OneCellValue_ValueType = 6
)

var OneCellValue_ValueType_name = map[int32]string{
	0: "NULL",
	1: "STRING",
	2: "DATETIME",
	3: "DECIMAL",
	4: "BOOL",
	5: "INT",
	6: "DOUBLE",
}

var OneCellValue_ValueType_value = map[string]int32{
	"NULL":     0,
	"STRING":   1,
	"DATETIME": 2,
	"DECIMAL":  3,
	"BOOL":     4,
	"INT":      5,
	"DOUBLE":   6,
}

func (x OneCellValue_ValueType) String() string {
	return proto.EnumName(OneCellValue_ValueType_name, int32(x))
}

func (OneCellValue_ValueType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e8873c4c109c555c, []int{3, 0}
}

type Empty struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Empty) Reset()         { *m = Empty{} }
func (m *Empty) String() string { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()    {}
func (*Empty) Descriptor() ([]byte, []int) {
	return fileDescriptor_e8873c4c109c555c, []int{0}
}

func (m *Empty) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Empty.Unmarshal(m, b)
}
func (m *Empty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Empty.Marshal(b, m, deterministic)
}
func (m *Empty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Empty.Merge(m, src)
}
func (m *Empty) XXX_Size() int {
	return xxx_messageInfo_Empty.Size(m)
}
func (m *Empty) XXX_DiscardUnknown() {
	xxx_messageInfo_Empty.DiscardUnknown(m)
}

var xxx_messageInfo_Empty proto.InternalMessageInfo

type DateTime struct {
	Year                 int32    `protobuf:"varint,2,opt,name=year,proto3" json:"year,omitempty"`
	Month                int32    `protobuf:"varint,3,opt,name=month,proto3" json:"month,omitempty"`
	Day                  int32    `protobuf:"varint,4,opt,name=day,proto3" json:"day,omitempty"`
	Hour                 int32    `protobuf:"varint,5,opt,name=hour,proto3" json:"hour,omitempty"`
	Minute               int32    `protobuf:"varint,6,opt,name=minute,proto3" json:"minute,omitempty"`
	Second               int32    `protobuf:"varint,7,opt,name=second,proto3" json:"second,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DateTime) Reset()         { *m = DateTime{} }
func (m *DateTime) String() string { return proto.CompactTextString(m) }
func (*DateTime) ProtoMessage()    {}
func (*DateTime) Descriptor() ([]byte, []int) {
	return fileDescriptor_e8873c4c109c555c, []int{1}
}

func (m *DateTime) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DateTime.Unmarshal(m, b)
}
func (m *DateTime) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DateTime.Marshal(b, m, deterministic)
}
func (m *DateTime) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DateTime.Merge(m, src)
}
func (m *DateTime) XXX_Size() int {
	return xxx_messageInfo_DateTime.Size(m)
}
func (m *DateTime) XXX_DiscardUnknown() {
	xxx_messageInfo_DateTime.DiscardUnknown(m)
}

var xxx_messageInfo_DateTime proto.InternalMessageInfo

func (m *DateTime) GetYear() int32 {
	if m != nil {
		return m.Year
	}
	return 0
}

func (m *DateTime) GetMonth() int32 {
	if m != nil {
		return m.Month
	}
	return 0
}

func (m *DateTime) GetDay() int32 {
	if m != nil {
		return m.Day
	}
	return 0
}

func (m *DateTime) GetHour() int32 {
	if m != nil {
		return m.Hour
	}
	return 0
}

func (m *DateTime) GetMinute() int32 {
	if m != nil {
		return m.Minute
	}
	return 0
}

func (m *DateTime) GetSecond() int32 {
	if m != nil {
		return m.Second
	}
	return 0
}

type HandlerRq struct {
	Handler              string   `protobuf:"bytes,1,opt,name=handler,proto3" json:"handler,omitempty"`
	SaveIt               bool     `protobuf:"varint,2,opt,name=saveIt,proto3" json:"saveIt,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HandlerRq) Reset()         { *m = HandlerRq{} }
func (m *HandlerRq) String() string { return proto.CompactTextString(m) }
func (*HandlerRq) ProtoMessage()    {}
func (*HandlerRq) Descriptor() ([]byte, []int) {
	return fileDescriptor_e8873c4c109c555c, []int{2}
}

func (m *HandlerRq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HandlerRq.Unmarshal(m, b)
}
func (m *HandlerRq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HandlerRq.Marshal(b, m, deterministic)
}
func (m *HandlerRq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HandlerRq.Merge(m, src)
}
func (m *HandlerRq) XXX_Size() int {
	return xxx_messageInfo_HandlerRq.Size(m)
}
func (m *HandlerRq) XXX_DiscardUnknown() {
	xxx_messageInfo_HandlerRq.DiscardUnknown(m)
}

var xxx_messageInfo_HandlerRq proto.InternalMessageInfo

func (m *HandlerRq) GetHandler() string {
	if m != nil {
		return m.Handler
	}
	return ""
}

func (m *HandlerRq) GetSaveIt() bool {
	if m != nil {
		return m.SaveIt
	}
	return false
}

type OneCellValue struct {
	Type                 OneCellValue_ValueType `protobuf:"varint,1,opt,name=type,proto3,enum=grpcexcel.OneCellValue_ValueType" json:"type,omitempty"`
	DoubleVal            float64                `protobuf:"fixed64,2,opt,name=doubleVal,proto3" json:"doubleVal,omitempty"`
	StrVal               string                 `protobuf:"bytes,3,opt,name=strVal,proto3" json:"strVal,omitempty"`
	DateVal              *DateTime              `protobuf:"bytes,4,opt,name=dateVal,proto3" json:"dateVal,omitempty"`
	BoolVal              bool                   `protobuf:"varint,5,opt,name=boolVal,proto3" json:"boolVal,omitempty"`
	IntVal               int64                  `protobuf:"varint,6,opt,name=intVal,proto3" json:"intVal,omitempty"`
	Format               string                 `protobuf:"bytes,7,opt,name=format,proto3" json:"format,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *OneCellValue) Reset()         { *m = OneCellValue{} }
func (m *OneCellValue) String() string { return proto.CompactTextString(m) }
func (*OneCellValue) ProtoMessage()    {}
func (*OneCellValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_e8873c4c109c555c, []int{3}
}

func (m *OneCellValue) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OneCellValue.Unmarshal(m, b)
}
func (m *OneCellValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OneCellValue.Marshal(b, m, deterministic)
}
func (m *OneCellValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OneCellValue.Merge(m, src)
}
func (m *OneCellValue) XXX_Size() int {
	return xxx_messageInfo_OneCellValue.Size(m)
}
func (m *OneCellValue) XXX_DiscardUnknown() {
	xxx_messageInfo_OneCellValue.DiscardUnknown(m)
}

var xxx_messageInfo_OneCellValue proto.InternalMessageInfo

func (m *OneCellValue) GetType() OneCellValue_ValueType {
	if m != nil {
		return m.Type
	}
	return OneCellValue_NULL
}

func (m *OneCellValue) GetDoubleVal() float64 {
	if m != nil {
		return m.DoubleVal
	}
	return 0
}

func (m *OneCellValue) GetStrVal() string {
	if m != nil {
		return m.StrVal
	}
	return ""
}

func (m *OneCellValue) GetDateVal() *DateTime {
	if m != nil {
		return m.DateVal
	}
	return nil
}

func (m *OneCellValue) GetBoolVal() bool {
	if m != nil {
		return m.BoolVal
	}
	return false
}

func (m *OneCellValue) GetIntVal() int64 {
	if m != nil {
		return m.IntVal
	}
	return 0
}

func (m *OneCellValue) GetFormat() string {
	if m != nil {
		return m.Format
	}
	return ""
}

type NamedRange struct {
	Name                 string          `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Vals                 []*OneCellValue `protobuf:"bytes,2,rep,name=vals,proto3" json:"vals,omitempty"`
	CountCols            int32           `protobuf:"varint,3,opt,name=countCols,proto3" json:"countCols,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *NamedRange) Reset()         { *m = NamedRange{} }
func (m *NamedRange) String() string { return proto.CompactTextString(m) }
func (*NamedRange) ProtoMessage()    {}
func (*NamedRange) Descriptor() ([]byte, []int) {
	return fileDescriptor_e8873c4c109c555c, []int{4}
}

func (m *NamedRange) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NamedRange.Unmarshal(m, b)
}
func (m *NamedRange) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NamedRange.Marshal(b, m, deterministic)
}
func (m *NamedRange) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NamedRange.Merge(m, src)
}
func (m *NamedRange) XXX_Size() int {
	return xxx_messageInfo_NamedRange.Size(m)
}
func (m *NamedRange) XXX_DiscardUnknown() {
	xxx_messageInfo_NamedRange.DiscardUnknown(m)
}

var xxx_messageInfo_NamedRange proto.InternalMessageInfo

func (m *NamedRange) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *NamedRange) GetVals() []*OneCellValue {
	if m != nil {
		return m.Vals
	}
	return nil
}

func (m *NamedRange) GetCountCols() int32 {
	if m != nil {
		return m.CountCols
	}
	return 0
}

type NamedCellsResp struct {
	Count                int32         `protobuf:"varint,1,opt,name=Count,proto3" json:"Count,omitempty"`
	Names                []*NamedRange `protobuf:"bytes,2,rep,name=names,proto3" json:"names,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *NamedCellsResp) Reset()         { *m = NamedCellsResp{} }
func (m *NamedCellsResp) String() string { return proto.CompactTextString(m) }
func (*NamedCellsResp) ProtoMessage()    {}
func (*NamedCellsResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_e8873c4c109c555c, []int{5}
}

func (m *NamedCellsResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NamedCellsResp.Unmarshal(m, b)
}
func (m *NamedCellsResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NamedCellsResp.Marshal(b, m, deterministic)
}
func (m *NamedCellsResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NamedCellsResp.Merge(m, src)
}
func (m *NamedCellsResp) XXX_Size() int {
	return xxx_messageInfo_NamedCellsResp.Size(m)
}
func (m *NamedCellsResp) XXX_DiscardUnknown() {
	xxx_messageInfo_NamedCellsResp.DiscardUnknown(m)
}

var xxx_messageInfo_NamedCellsResp proto.InternalMessageInfo

func (m *NamedCellsResp) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *NamedCellsResp) GetNames() []*NamedRange {
	if m != nil {
		return m.Names
	}
	return nil
}

type CellsResp struct {
	Count                int32         `protobuf:"varint,1,opt,name=Count,proto3" json:"Count,omitempty"`
	Names                []*NamedRange `protobuf:"bytes,2,rep,name=names,proto3" json:"names,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *CellsResp) Reset()         { *m = CellsResp{} }
func (m *CellsResp) String() string { return proto.CompactTextString(m) }
func (*CellsResp) ProtoMessage()    {}
func (*CellsResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_e8873c4c109c555c, []int{6}
}

func (m *CellsResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CellsResp.Unmarshal(m, b)
}
func (m *CellsResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CellsResp.Marshal(b, m, deterministic)
}
func (m *CellsResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CellsResp.Merge(m, src)
}
func (m *CellsResp) XXX_Size() int {
	return xxx_messageInfo_CellsResp.Size(m)
}
func (m *CellsResp) XXX_DiscardUnknown() {
	xxx_messageInfo_CellsResp.DiscardUnknown(m)
}

var xxx_messageInfo_CellsResp proto.InternalMessageInfo

func (m *CellsResp) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *CellsResp) GetNames() []*NamedRange {
	if m != nil {
		return m.Names
	}
	return nil
}

type GetNamedCellsRq struct {
	Handler              string   `protobuf:"bytes,1,opt,name=handler,proto3" json:"handler,omitempty"`
	Names                []string `protobuf:"bytes,2,rep,name=names,proto3" json:"names,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetNamedCellsRq) Reset()         { *m = GetNamedCellsRq{} }
func (m *GetNamedCellsRq) String() string { return proto.CompactTextString(m) }
func (*GetNamedCellsRq) ProtoMessage()    {}
func (*GetNamedCellsRq) Descriptor() ([]byte, []int) {
	return fileDescriptor_e8873c4c109c555c, []int{7}
}

func (m *GetNamedCellsRq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetNamedCellsRq.Unmarshal(m, b)
}
func (m *GetNamedCellsRq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetNamedCellsRq.Marshal(b, m, deterministic)
}
func (m *GetNamedCellsRq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetNamedCellsRq.Merge(m, src)
}
func (m *GetNamedCellsRq) XXX_Size() int {
	return xxx_messageInfo_GetNamedCellsRq.Size(m)
}
func (m *GetNamedCellsRq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetNamedCellsRq.DiscardUnknown(m)
}

var xxx_messageInfo_GetNamedCellsRq proto.InternalMessageInfo

func (m *GetNamedCellsRq) GetHandler() string {
	if m != nil {
		return m.Handler
	}
	return ""
}

func (m *GetNamedCellsRq) GetNames() []string {
	if m != nil {
		return m.Names
	}
	return nil
}

type GetCellsRq struct {
	Handler              string   `protobuf:"bytes,1,opt,name=handler,proto3" json:"handler,omitempty"`
	Sheet                string   `protobuf:"bytes,2,opt,name=sheet,proto3" json:"sheet,omitempty"`
	Begin                string   `protobuf:"bytes,3,opt,name=begin,proto3" json:"begin,omitempty"`
	End                  string   `protobuf:"bytes,4,opt,name=end,proto3" json:"end,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetCellsRq) Reset()         { *m = GetCellsRq{} }
func (m *GetCellsRq) String() string { return proto.CompactTextString(m) }
func (*GetCellsRq) ProtoMessage()    {}
func (*GetCellsRq) Descriptor() ([]byte, []int) {
	return fileDescriptor_e8873c4c109c555c, []int{8}
}

func (m *GetCellsRq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetCellsRq.Unmarshal(m, b)
}
func (m *GetCellsRq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetCellsRq.Marshal(b, m, deterministic)
}
func (m *GetCellsRq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCellsRq.Merge(m, src)
}
func (m *GetCellsRq) XXX_Size() int {
	return xxx_messageInfo_GetCellsRq.Size(m)
}
func (m *GetCellsRq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCellsRq.DiscardUnknown(m)
}

var xxx_messageInfo_GetCellsRq proto.InternalMessageInfo

func (m *GetCellsRq) GetHandler() string {
	if m != nil {
		return m.Handler
	}
	return ""
}

func (m *GetCellsRq) GetSheet() string {
	if m != nil {
		return m.Sheet
	}
	return ""
}

func (m *GetCellsRq) GetBegin() string {
	if m != nil {
		return m.Begin
	}
	return ""
}

func (m *GetCellsRq) GetEnd() string {
	if m != nil {
		return m.End
	}
	return ""
}

type GetRangesRq struct {
	Handler              string   `protobuf:"bytes,1,opt,name=handler,proto3" json:"handler,omitempty"`
	Sheet                string   `protobuf:"bytes,2,opt,name=sheet,proto3" json:"sheet,omitempty"`
	Names                []string `protobuf:"bytes,3,rep,name=names,proto3" json:"names,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetRangesRq) Reset()         { *m = GetRangesRq{} }
func (m *GetRangesRq) String() string { return proto.CompactTextString(m) }
func (*GetRangesRq) ProtoMessage()    {}
func (*GetRangesRq) Descriptor() ([]byte, []int) {
	return fileDescriptor_e8873c4c109c555c, []int{9}
}

func (m *GetRangesRq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetRangesRq.Unmarshal(m, b)
}
func (m *GetRangesRq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetRangesRq.Marshal(b, m, deterministic)
}
func (m *GetRangesRq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRangesRq.Merge(m, src)
}
func (m *GetRangesRq) XXX_Size() int {
	return xxx_messageInfo_GetRangesRq.Size(m)
}
func (m *GetRangesRq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRangesRq.DiscardUnknown(m)
}

var xxx_messageInfo_GetRangesRq proto.InternalMessageInfo

func (m *GetRangesRq) GetHandler() string {
	if m != nil {
		return m.Handler
	}
	return ""
}

func (m *GetRangesRq) GetSheet() string {
	if m != nil {
		return m.Sheet
	}
	return ""
}

func (m *GetRangesRq) GetNames() []string {
	if m != nil {
		return m.Names
	}
	return nil
}

type UploadRq struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Bytes                []byte   `protobuf:"bytes,2,opt,name=bytes,proto3" json:"bytes,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UploadRq) Reset()         { *m = UploadRq{} }
func (m *UploadRq) String() string { return proto.CompactTextString(m) }
func (*UploadRq) ProtoMessage()    {}
func (*UploadRq) Descriptor() ([]byte, []int) {
	return fileDescriptor_e8873c4c109c555c, []int{10}
}

func (m *UploadRq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UploadRq.Unmarshal(m, b)
}
func (m *UploadRq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UploadRq.Marshal(b, m, deterministic)
}
func (m *UploadRq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UploadRq.Merge(m, src)
}
func (m *UploadRq) XXX_Size() int {
	return xxx_messageInfo_UploadRq.Size(m)
}
func (m *UploadRq) XXX_DiscardUnknown() {
	xxx_messageInfo_UploadRq.DiscardUnknown(m)
}

var xxx_messageInfo_UploadRq proto.InternalMessageInfo

func (m *UploadRq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UploadRq) GetBytes() []byte {
	if m != nil {
		return m.Bytes
	}
	return nil
}

type UploadResp struct {
	Handler              string   `protobuf:"bytes,1,opt,name=handler,proto3" json:"handler,omitempty"`
	IsOk                 bool     `protobuf:"varint,2,opt,name=isOk,proto3" json:"isOk,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UploadResp) Reset()         { *m = UploadResp{} }
func (m *UploadResp) String() string { return proto.CompactTextString(m) }
func (*UploadResp) ProtoMessage()    {}
func (*UploadResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_e8873c4c109c555c, []int{11}
}

func (m *UploadResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UploadResp.Unmarshal(m, b)
}
func (m *UploadResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UploadResp.Marshal(b, m, deterministic)
}
func (m *UploadResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UploadResp.Merge(m, src)
}
func (m *UploadResp) XXX_Size() int {
	return xxx_messageInfo_UploadResp.Size(m)
}
func (m *UploadResp) XXX_DiscardUnknown() {
	xxx_messageInfo_UploadResp.DiscardUnknown(m)
}

var xxx_messageInfo_UploadResp proto.InternalMessageInfo

func (m *UploadResp) GetHandler() string {
	if m != nil {
		return m.Handler
	}
	return ""
}

func (m *UploadResp) GetIsOk() bool {
	if m != nil {
		return m.IsOk
	}
	return false
}

type ListResp struct {
	Filename             []string `protobuf:"bytes,1,rep,name=filename,proto3" json:"filename,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListResp) Reset()         { *m = ListResp{} }
func (m *ListResp) String() string { return proto.CompactTextString(m) }
func (*ListResp) ProtoMessage()    {}
func (*ListResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_e8873c4c109c555c, []int{12}
}

func (m *ListResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListResp.Unmarshal(m, b)
}
func (m *ListResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListResp.Marshal(b, m, deterministic)
}
func (m *ListResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListResp.Merge(m, src)
}
func (m *ListResp) XXX_Size() int {
	return xxx_messageInfo_ListResp.Size(m)
}
func (m *ListResp) XXX_DiscardUnknown() {
	xxx_messageInfo_ListResp.DiscardUnknown(m)
}

var xxx_messageInfo_ListResp proto.InternalMessageInfo

func (m *ListResp) GetFilename() []string {
	if m != nil {
		return m.Filename
	}
	return nil
}

type SetSetValuesRq struct {
	Handler              string        `protobuf:"bytes,1,opt,name=handler,proto3" json:"handler,omitempty"`
	Ranges               []*NamedRange `protobuf:"bytes,2,rep,name=ranges,proto3" json:"ranges,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *SetSetValuesRq) Reset()         { *m = SetSetValuesRq{} }
func (m *SetSetValuesRq) String() string { return proto.CompactTextString(m) }
func (*SetSetValuesRq) ProtoMessage()    {}
func (*SetSetValuesRq) Descriptor() ([]byte, []int) {
	return fileDescriptor_e8873c4c109c555c, []int{13}
}

func (m *SetSetValuesRq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SetSetValuesRq.Unmarshal(m, b)
}
func (m *SetSetValuesRq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SetSetValuesRq.Marshal(b, m, deterministic)
}
func (m *SetSetValuesRq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetSetValuesRq.Merge(m, src)
}
func (m *SetSetValuesRq) XXX_Size() int {
	return xxx_messageInfo_SetSetValuesRq.Size(m)
}
func (m *SetSetValuesRq) XXX_DiscardUnknown() {
	xxx_messageInfo_SetSetValuesRq.DiscardUnknown(m)
}

var xxx_messageInfo_SetSetValuesRq proto.InternalMessageInfo

func (m *SetSetValuesRq) GetHandler() string {
	if m != nil {
		return m.Handler
	}
	return ""
}

func (m *SetSetValuesRq) GetRanges() []*NamedRange {
	if m != nil {
		return m.Ranges
	}
	return nil
}

type OpenRq struct {
	Filename             string   `protobuf:"bytes,1,opt,name=filename,proto3" json:"filename,omitempty"`
	Handler              string   `protobuf:"bytes,2,opt,name=handler,proto3" json:"handler,omitempty"`
	WithSheets           bool     `protobuf:"varint,3,opt,name=withSheets,proto3" json:"withSheets,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OpenRq) Reset()         { *m = OpenRq{} }
func (m *OpenRq) String() string { return proto.CompactTextString(m) }
func (*OpenRq) ProtoMessage()    {}
func (*OpenRq) Descriptor() ([]byte, []int) {
	return fileDescriptor_e8873c4c109c555c, []int{14}
}

func (m *OpenRq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OpenRq.Unmarshal(m, b)
}
func (m *OpenRq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OpenRq.Marshal(b, m, deterministic)
}
func (m *OpenRq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OpenRq.Merge(m, src)
}
func (m *OpenRq) XXX_Size() int {
	return xxx_messageInfo_OpenRq.Size(m)
}
func (m *OpenRq) XXX_DiscardUnknown() {
	xxx_messageInfo_OpenRq.DiscardUnknown(m)
}

var xxx_messageInfo_OpenRq proto.InternalMessageInfo

func (m *OpenRq) GetFilename() string {
	if m != nil {
		return m.Filename
	}
	return ""
}

func (m *OpenRq) GetHandler() string {
	if m != nil {
		return m.Handler
	}
	return ""
}

func (m *OpenRq) GetWithSheets() bool {
	if m != nil {
		return m.WithSheets
	}
	return false
}

type ExcelSheet struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	MaxRow               int32    `protobuf:"varint,2,opt,name=maxRow,proto3" json:"maxRow,omitempty"`
	MaxCol               int32    `protobuf:"varint,3,opt,name=maxCol,proto3" json:"maxCol,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ExcelSheet) Reset()         { *m = ExcelSheet{} }
func (m *ExcelSheet) String() string { return proto.CompactTextString(m) }
func (*ExcelSheet) ProtoMessage()    {}
func (*ExcelSheet) Descriptor() ([]byte, []int) {
	return fileDescriptor_e8873c4c109c555c, []int{15}
}

func (m *ExcelSheet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExcelSheet.Unmarshal(m, b)
}
func (m *ExcelSheet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExcelSheet.Marshal(b, m, deterministic)
}
func (m *ExcelSheet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExcelSheet.Merge(m, src)
}
func (m *ExcelSheet) XXX_Size() int {
	return xxx_messageInfo_ExcelSheet.Size(m)
}
func (m *ExcelSheet) XXX_DiscardUnknown() {
	xxx_messageInfo_ExcelSheet.DiscardUnknown(m)
}

var xxx_messageInfo_ExcelSheet proto.InternalMessageInfo

func (m *ExcelSheet) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ExcelSheet) GetMaxRow() int32 {
	if m != nil {
		return m.MaxRow
	}
	return 0
}

func (m *ExcelSheet) GetMaxCol() int32 {
	if m != nil {
		return m.MaxCol
	}
	return 0
}

type OpenResp struct {
	Handler              string        `protobuf:"bytes,1,opt,name=handler,proto3" json:"handler,omitempty"`
	IsOk                 bool          `protobuf:"varint,2,opt,name=isOk,proto3" json:"isOk,omitempty"`
	ErrMsg               string        `protobuf:"bytes,3,opt,name=errMsg,proto3" json:"errMsg,omitempty"`
	Sheets               []*ExcelSheet `protobuf:"bytes,4,rep,name=sheets,proto3" json:"sheets,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *OpenResp) Reset()         { *m = OpenResp{} }
func (m *OpenResp) String() string { return proto.CompactTextString(m) }
func (*OpenResp) ProtoMessage()    {}
func (*OpenResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_e8873c4c109c555c, []int{16}
}

func (m *OpenResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OpenResp.Unmarshal(m, b)
}
func (m *OpenResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OpenResp.Marshal(b, m, deterministic)
}
func (m *OpenResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OpenResp.Merge(m, src)
}
func (m *OpenResp) XXX_Size() int {
	return xxx_messageInfo_OpenResp.Size(m)
}
func (m *OpenResp) XXX_DiscardUnknown() {
	xxx_messageInfo_OpenResp.DiscardUnknown(m)
}

var xxx_messageInfo_OpenResp proto.InternalMessageInfo

func (m *OpenResp) GetHandler() string {
	if m != nil {
		return m.Handler
	}
	return ""
}

func (m *OpenResp) GetIsOk() bool {
	if m != nil {
		return m.IsOk
	}
	return false
}

func (m *OpenResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func (m *OpenResp) GetSheets() []*ExcelSheet {
	if m != nil {
		return m.Sheets
	}
	return nil
}

type MacroNameRq struct {
	Handler              string   `protobuf:"bytes,1,opt,name=handler,proto3" json:"handler,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MacroNameRq) Reset()         { *m = MacroNameRq{} }
func (m *MacroNameRq) String() string { return proto.CompactTextString(m) }
func (*MacroNameRq) ProtoMessage()    {}
func (*MacroNameRq) Descriptor() ([]byte, []int) {
	return fileDescriptor_e8873c4c109c555c, []int{17}
}

func (m *MacroNameRq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MacroNameRq.Unmarshal(m, b)
}
func (m *MacroNameRq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MacroNameRq.Marshal(b, m, deterministic)
}
func (m *MacroNameRq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MacroNameRq.Merge(m, src)
}
func (m *MacroNameRq) XXX_Size() int {
	return xxx_messageInfo_MacroNameRq.Size(m)
}
func (m *MacroNameRq) XXX_DiscardUnknown() {
	xxx_messageInfo_MacroNameRq.DiscardUnknown(m)
}

var xxx_messageInfo_MacroNameRq proto.InternalMessageInfo

func (m *MacroNameRq) GetHandler() string {
	if m != nil {
		return m.Handler
	}
	return ""
}

func (m *MacroNameRq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type ListMacrosRq struct {
	Handler              string   `protobuf:"bytes,1,opt,name=handler,proto3" json:"handler,omitempty"`
	MacroNames           []string `protobuf:"bytes,2,rep,name=macroNames,proto3" json:"macroNames,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListMacrosRq) Reset()         { *m = ListMacrosRq{} }
func (m *ListMacrosRq) String() string { return proto.CompactTextString(m) }
func (*ListMacrosRq) ProtoMessage()    {}
func (*ListMacrosRq) Descriptor() ([]byte, []int) {
	return fileDescriptor_e8873c4c109c555c, []int{18}
}

func (m *ListMacrosRq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListMacrosRq.Unmarshal(m, b)
}
func (m *ListMacrosRq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListMacrosRq.Marshal(b, m, deterministic)
}
func (m *ListMacrosRq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListMacrosRq.Merge(m, src)
}
func (m *ListMacrosRq) XXX_Size() int {
	return xxx_messageInfo_ListMacrosRq.Size(m)
}
func (m *ListMacrosRq) XXX_DiscardUnknown() {
	xxx_messageInfo_ListMacrosRq.DiscardUnknown(m)
}

var xxx_messageInfo_ListMacrosRq proto.InternalMessageInfo

func (m *ListMacrosRq) GetHandler() string {
	if m != nil {
		return m.Handler
	}
	return ""
}

func (m *ListMacrosRq) GetMacroNames() []string {
	if m != nil {
		return m.MacroNames
	}
	return nil
}

type ListMacrosResp struct {
	MacroNames           []string `protobuf:"bytes,1,rep,name=macroNames,proto3" json:"macroNames,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListMacrosResp) Reset()         { *m = ListMacrosResp{} }
func (m *ListMacrosResp) String() string { return proto.CompactTextString(m) }
func (*ListMacrosResp) ProtoMessage()    {}
func (*ListMacrosResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_e8873c4c109c555c, []int{19}
}

func (m *ListMacrosResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListMacrosResp.Unmarshal(m, b)
}
func (m *ListMacrosResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListMacrosResp.Marshal(b, m, deterministic)
}
func (m *ListMacrosResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListMacrosResp.Merge(m, src)
}
func (m *ListMacrosResp) XXX_Size() int {
	return xxx_messageInfo_ListMacrosResp.Size(m)
}
func (m *ListMacrosResp) XXX_DiscardUnknown() {
	xxx_messageInfo_ListMacrosResp.DiscardUnknown(m)
}

var xxx_messageInfo_ListMacrosResp proto.InternalMessageInfo

func (m *ListMacrosResp) GetMacroNames() []string {
	if m != nil {
		return m.MacroNames
	}
	return nil
}

type StatusMacroResp struct {
	Status               int32    `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StatusMacroResp) Reset()         { *m = StatusMacroResp{} }
func (m *StatusMacroResp) String() string { return proto.CompactTextString(m) }
func (*StatusMacroResp) ProtoMessage()    {}
func (*StatusMacroResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_e8873c4c109c555c, []int{20}
}

func (m *StatusMacroResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StatusMacroResp.Unmarshal(m, b)
}
func (m *StatusMacroResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StatusMacroResp.Marshal(b, m, deterministic)
}
func (m *StatusMacroResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StatusMacroResp.Merge(m, src)
}
func (m *StatusMacroResp) XXX_Size() int {
	return xxx_messageInfo_StatusMacroResp.Size(m)
}
func (m *StatusMacroResp) XXX_DiscardUnknown() {
	xxx_messageInfo_StatusMacroResp.DiscardUnknown(m)
}

var xxx_messageInfo_StatusMacroResp proto.InternalMessageInfo

func (m *StatusMacroResp) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func init() {
	proto.RegisterEnum("grpcexcel.OneCellValue_ValueType", OneCellValue_ValueType_name, OneCellValue_ValueType_value)
	proto.RegisterType((*Empty)(nil), "grpcexcel.Empty")
	proto.RegisterType((*DateTime)(nil), "grpcexcel.DateTime")
	proto.RegisterType((*HandlerRq)(nil), "grpcexcel.HandlerRq")
	proto.RegisterType((*OneCellValue)(nil), "grpcexcel.OneCellValue")
	proto.RegisterType((*NamedRange)(nil), "grpcexcel.NamedRange")
	proto.RegisterType((*NamedCellsResp)(nil), "grpcexcel.NamedCellsResp")
	proto.RegisterType((*CellsResp)(nil), "grpcexcel.CellsResp")
	proto.RegisterType((*GetNamedCellsRq)(nil), "grpcexcel.GetNamedCellsRq")
	proto.RegisterType((*GetCellsRq)(nil), "grpcexcel.GetCellsRq")
	proto.RegisterType((*GetRangesRq)(nil), "grpcexcel.GetRangesRq")
	proto.RegisterType((*UploadRq)(nil), "grpcexcel.UploadRq")
	proto.RegisterType((*UploadResp)(nil), "grpcexcel.UploadResp")
	proto.RegisterType((*ListResp)(nil), "grpcexcel.ListResp")
	proto.RegisterType((*SetSetValuesRq)(nil), "grpcexcel.SetSetValuesRq")
	proto.RegisterType((*OpenRq)(nil), "grpcexcel.OpenRq")
	proto.RegisterType((*ExcelSheet)(nil), "grpcexcel.ExcelSheet")
	proto.RegisterType((*OpenResp)(nil), "grpcexcel.OpenResp")
	proto.RegisterType((*MacroNameRq)(nil), "grpcexcel.MacroNameRq")
	proto.RegisterType((*ListMacrosRq)(nil), "grpcexcel.ListMacrosRq")
	proto.RegisterType((*ListMacrosResp)(nil), "grpcexcel.ListMacrosResp")
	proto.RegisterType((*StatusMacroResp)(nil), "grpcexcel.StatusMacroResp")
}

func init() { proto.RegisterFile("proto/grpcexcel.proto", fileDescriptor_e8873c4c109c555c) }

var fileDescriptor_e8873c4c109c555c = []byte{
	// 973 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0xe1, 0x6e, 0x1a, 0x47,
	0x10, 0x2e, 0x70, 0xc0, 0xdd, 0x98, 0x3a, 0x74, 0x6b, 0x27, 0x14, 0x55, 0x91, 0xbb, 0x3f, 0x2a,
	0x57, 0x91, 0x49, 0xe5, 0xa6, 0x6a, 0xd5, 0xaa, 0x95, 0x6c, 0x4c, 0x09, 0x12, 0x86, 0x68, 0xc1,
	0x91, 0xaa, 0x4a, 0x95, 0xce, 0xdc, 0x06, 0x4e, 0x39, 0xee, 0xce, 0x77, 0x8b, 0x13, 0x7e, 0xf5,
	0x7f, 0x1f, 0xa5, 0xcf, 0xd1, 0x17, 0xe8, 0x1b, 0x55, 0x33, 0xb7, 0x07, 0x0b, 0x76, 0x50, 0x5a,
	0xe5, 0x8f, 0xb5, 0xdf, 0x30, 0xb3, 0xf3, 0xed, 0xb7, 0xdf, 0xce, 0x19, 0x0e, 0xe3, 0x24, 0x52,
	0xd1, 0xd3, 0x69, 0x12, 0x4f, 0xe4, 0xdb, 0x89, 0x0c, 0x5a, 0x84, 0x99, 0xb3, 0x0a, 0xf0, 0x2a,
	0x94, 0x3b, 0xf3, 0x58, 0x2d, 0xf9, 0x9f, 0x05, 0xb0, 0x2f, 0x5c, 0x25, 0xc7, 0xfe, 0x5c, 0x32,
	0x06, 0xd6, 0x52, 0xba, 0x49, 0xa3, 0x78, 0x54, 0x38, 0x2e, 0x0b, 0x5a, 0xb3, 0x03, 0x28, 0xcf,
	0xa3, 0x50, 0xcd, 0x1a, 0x25, 0x0a, 0x66, 0x80, 0xd5, 0xa1, 0xe4, 0xb9, 0xcb, 0x86, 0x45, 0x31,
	0x5c, 0x62, 0xed, 0x2c, 0x5a, 0x24, 0x8d, 0x72, 0x56, 0x8b, 0x6b, 0xf6, 0x10, 0x2a, 0x73, 0x3f,
	0x5c, 0x28, 0xd9, 0xa8, 0x50, 0x54, 0x23, 0x8c, 0xa7, 0x72, 0x12, 0x85, 0x5e, 0xa3, 0x9a, 0xc5,
	0x33, 0xc4, 0x7f, 0x02, 0xe7, 0xb9, 0x1b, 0x7a, 0x81, 0x4c, 0xc4, 0x0d, 0x6b, 0x40, 0x75, 0x96,
	0x81, 0x46, 0xe1, 0xa8, 0x70, 0xec, 0x88, 0x1c, 0x52, 0xb9, 0x7b, 0x2b, 0x7b, 0x8a, 0x88, 0xda,
	0x42, 0x23, 0xfe, 0x4f, 0x11, 0x6a, 0xc3, 0x50, 0xb6, 0x65, 0x10, 0xbc, 0x74, 0x83, 0x85, 0x64,
	0xdf, 0x82, 0xa5, 0x96, 0xb1, 0xa4, 0xfa, 0xfd, 0xd3, 0x2f, 0x5a, 0x6b, 0x41, 0xcc, 0xb4, 0x16,
	0xfd, 0x1d, 0x2f, 0x63, 0x29, 0x28, 0x9d, 0x7d, 0x0e, 0x8e, 0x17, 0x2d, 0xae, 0x03, 0xf9, 0xd2,
	0x0d, 0xa8, 0x45, 0x41, 0xac, 0x03, 0xd4, 0x5d, 0x25, 0xf8, 0x53, 0x89, 0x68, 0x69, 0xc4, 0x4e,
	0xa0, 0xea, 0xb9, 0x8a, 0x6a, 0x50, 0x96, 0xbd, 0xd3, 0x4f, 0x8d, 0x7e, 0xb9, 0xc4, 0x22, 0xcf,
	0xc1, 0xe3, 0x5d, 0x47, 0x11, 0x32, 0x20, 0xc9, 0x6c, 0x91, 0x43, 0x6c, 0xe0, 0x87, 0x0a, 0x7f,
	0x40, 0xd5, 0x4a, 0x42, 0x23, 0x8c, 0xbf, 0x8a, 0x92, 0xb9, 0xab, 0x48, 0x35, 0x47, 0x68, 0xc4,
	0x7f, 0x03, 0x67, 0x75, 0x02, 0x66, 0x83, 0x35, 0xb8, 0xea, 0xf7, 0xeb, 0x1f, 0x31, 0x80, 0xca,
	0x68, 0x2c, 0x7a, 0x83, 0x6e, 0xbd, 0xc0, 0x6a, 0x60, 0x5f, 0x9c, 0x8d, 0x3b, 0xe3, 0xde, 0x65,
	0xa7, 0x5e, 0x64, 0x7b, 0x50, 0xbd, 0xe8, 0xb4, 0x7b, 0x97, 0x67, 0xfd, 0x7a, 0x09, 0x0b, 0xce,
	0x87, 0xc3, 0x7e, 0xdd, 0x62, 0x55, 0x28, 0xf5, 0x06, 0xe3, 0x7a, 0x19, 0x2b, 0x2f, 0x86, 0x57,
	0xe7, 0xfd, 0x4e, 0xbd, 0xc2, 0x5f, 0x03, 0x0c, 0xdc, 0xb9, 0xf4, 0x84, 0x1b, 0x4e, 0xc9, 0x20,
	0xa1, 0x3b, 0x97, 0xfa, 0x42, 0x68, 0xcd, 0x9e, 0x80, 0x75, 0xeb, 0x06, 0x69, 0xa3, 0x78, 0x54,
	0x3a, 0xde, 0x3b, 0x7d, 0xf4, 0x0e, 0x91, 0x05, 0x25, 0xa1, 0xb4, 0x93, 0x68, 0x11, 0xaa, 0x76,
	0x14, 0xa4, 0xda, 0x51, 0xeb, 0x00, 0x1f, 0xc1, 0x3e, 0x35, 0xc3, 0xaa, 0x54, 0xc8, 0x34, 0x46,
	0xf7, 0xb5, 0xf1, 0x67, 0xea, 0x58, 0x16, 0x19, 0x60, 0x4f, 0xa0, 0x8c, 0xad, 0xf3, 0x9e, 0x87,
	0x46, 0xcf, 0x35, 0x59, 0x91, 0xe5, 0xf0, 0x01, 0x38, 0x1f, 0x74, 0xbf, 0x33, 0x78, 0xd0, 0x95,
	0xca, 0xe0, 0xb9, 0xcb, 0xaa, 0x07, 0xe6, 0xce, 0x4e, 0xbe, 0x85, 0x07, 0xd0, 0x95, 0xea, 0xbd,
	0xaa, 0xd3, 0x99, 0x94, 0x99, 0xcf, 0x1d, 0x91, 0x01, 0x8c, 0x5e, 0xcb, 0xa9, 0x1f, 0x6a, 0xff,
	0x65, 0x00, 0x5f, 0xa4, 0x0c, 0x3d, 0xb2, 0x9e, 0x23, 0x70, 0xc9, 0x47, 0xb0, 0xd7, 0x95, 0x8a,
	0xb8, 0xff, 0xcf, 0x36, 0x19, 0xf5, 0x92, 0x49, 0xfd, 0x19, 0xd8, 0x57, 0x71, 0x10, 0xb9, 0x9e,
	0xb8, 0xb9, 0xd7, 0x0d, 0x48, 0x6e, 0xa9, 0xe8, 0xc0, 0x85, 0xe3, 0x9a, 0xc8, 0x00, 0xff, 0x01,
	0x40, 0x57, 0xe1, 0x25, 0xbc, 0x9b, 0x09, 0x03, 0xcb, 0x4f, 0x87, 0xaf, 0xf5, 0xbb, 0xa6, 0x35,
	0xff, 0x12, 0xec, 0xbe, 0x9f, 0x2a, 0xaa, 0x6c, 0x82, 0xfd, 0xca, 0x0f, 0xa4, 0xee, 0x8a, 0xb4,
	0x56, 0x98, 0xff, 0x0a, 0xfb, 0x23, 0xa9, 0x46, 0x52, 0x91, 0xdf, 0x76, 0x9f, 0xf8, 0x04, 0x2a,
	0x09, 0xe9, 0xb2, 0xfb, 0xc6, 0x75, 0x12, 0xff, 0x1d, 0x2a, 0xc3, 0x58, 0x86, 0xe2, 0x66, 0x8b,
	0x40, 0xc1, 0x24, 0x60, 0xb6, 0x2b, 0x6e, 0xb6, 0x7b, 0x0c, 0xf0, 0xc6, 0x57, 0xb3, 0x11, 0xea,
	0x9a, 0xd9, 0xde, 0x16, 0x46, 0x84, 0xbf, 0x00, 0xe8, 0x60, 0x6f, 0x82, 0xf7, 0xca, 0x8a, 0x93,
	0xd4, 0x7d, 0x2b, 0xa2, 0x37, 0x7a, 0x36, 0x6b, 0xa4, 0xe3, 0xed, 0x28, 0xd0, 0x8f, 0x49, 0x23,
	0xfe, 0x07, 0xd8, 0xc4, 0xf8, 0x3f, 0xcb, 0x8d, 0x3b, 0xca, 0x24, 0xb9, 0x4c, 0xa7, 0xf9, 0x78,
	0xcb, 0x10, 0x4a, 0x96, 0x66, 0xfc, 0xad, 0x3b, 0x92, 0xad, 0xc9, 0x0b, 0x9d, 0xc4, 0x7f, 0x84,
	0xbd, 0x4b, 0x77, 0x92, 0x44, 0xa8, 0xe6, 0xce, 0xab, 0xc8, 0x4f, 0x5b, 0x5c, 0x9f, 0x96, 0x3f,
	0x87, 0x1a, 0x5e, 0x39, 0x6d, 0xb0, 0xfb, 0x22, 0x1f, 0x03, 0xcc, 0xf3, 0x36, 0xf9, 0x23, 0x33,
	0x22, 0xfc, 0x6b, 0xd8, 0x37, 0x76, 0x42, 0x35, 0x36, 0x2b, 0x0a, 0x77, 0x2a, 0xbe, 0x82, 0x07,
	0x23, 0xe5, 0xaa, 0x45, 0x4a, 0x35, 0x54, 0x42, 0x13, 0x1f, 0x43, 0x7a, 0x6a, 0x68, 0x74, 0xfa,
	0xb7, 0x05, 0xb5, 0xec, 0xe8, 0x32, 0xb9, 0xf5, 0x27, 0x92, 0xb5, 0xc0, 0x7a, 0xe1, 0x87, 0x53,
	0x76, 0x60, 0x68, 0xb3, 0xfa, 0xa0, 0x35, 0xeb, 0xa6, 0x62, 0xf8, 0xf1, 0x65, 0xcf, 0xa0, 0x92,
	0x3d, 0x0b, 0x66, 0x7e, 0x2b, 0xf2, 0xf7, 0xd5, 0x3c, 0xbc, 0x1b, 0x44, 0x3a, 0x27, 0x60, 0xe1,
	0x99, 0xd8, 0x9d, 0xfd, 0x9a, 0xe6, 0x2e, 0xab, 0x37, 0xd3, 0x02, 0x0b, 0xad, 0xc0, 0x3e, 0x31,
	0x27, 0x33, 0xb9, 0x79, 0x23, 0x7f, 0x65, 0x97, 0xa7, 0x50, 0x6e, 0x07, 0x51, 0x2a, 0xdf, 0xfb,
	0x14, 0xbf, 0xc0, 0xc7, 0x1b, 0x03, 0x91, 0x35, 0x8d, 0x94, 0xad, 0x51, 0xd9, 0xfc, 0x6c, 0xfb,
	0xa5, 0xad, 0x67, 0xf3, 0x77, 0x60, 0xe7, 0x53, 0x91, 0x1d, 0x6e, 0x6e, 0x91, 0x57, 0x9b, 0x94,
	0xd6, 0x85, 0xdf, 0x83, 0xb3, 0x7a, 0xf6, 0xcc, 0x6c, 0xb0, 0x39, 0x0f, 0xee, 0xa1, 0xde, 0x26,
	0xea, 0x2b, 0xa3, 0xa6, 0xec, 0xd1, 0x96, 0x82, 0xb9, 0x05, 0x37, 0x78, 0x6f, 0x39, 0xea, 0x67,
	0xb0, 0xc5, 0x22, 0xa4, 0x00, 0x7b, 0x68, 0xa4, 0x19, 0xfe, 0x6f, 0x9a, 0x92, 0x6c, 0xd9, 0xeb,
	0xbc, 0xf6, 0x57, 0xd1, 0xe9, 0x26, 0xf1, 0x84, 0xac, 0x74, 0x5d, 0xa1, 0xff, 0xd5, 0xbe, 0xf9,
	0x37, 0x00, 0x00, 0xff, 0xff, 0x5d, 0xb6, 0xf0, 0x7a, 0xc4, 0x09, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ExcelServiceClient is the client API for ExcelService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ExcelServiceClient interface {
	Ping(ctx context.Context, in *HandlerRq, opts ...grpc.CallOption) (*Empty, error)
	Upload(ctx context.Context, in *UploadRq, opts ...grpc.CallOption) (*UploadResp, error)
	List(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListResp, error)
	Open(ctx context.Context, in *OpenRq, opts ...grpc.CallOption) (*OpenResp, error)
	Close(ctx context.Context, in *HandlerRq, opts ...grpc.CallOption) (*Empty, error)
	GetNamedCells(ctx context.Context, in *GetNamedCellsRq, opts ...grpc.CallOption) (*NamedCellsResp, error)
	GetCells(ctx context.Context, in *GetCellsRq, opts ...grpc.CallOption) (*CellsResp, error)
	SetValues(ctx context.Context, in *SetSetValuesRq, opts ...grpc.CallOption) (*Empty, error)
	GetMacroNames(ctx context.Context, in *ListMacrosRq, opts ...grpc.CallOption) (*ListMacrosResp, error)
	RunMacro(ctx context.Context, in *MacroNameRq, opts ...grpc.CallOption) (*StatusMacroResp, error)
}

type excelServiceClient struct {
	cc *grpc.ClientConn
}

func NewExcelServiceClient(cc *grpc.ClientConn) ExcelServiceClient {
	return &excelServiceClient{cc}
}

func (c *excelServiceClient) Ping(ctx context.Context, in *HandlerRq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/grpcexcel.ExcelService/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *excelServiceClient) Upload(ctx context.Context, in *UploadRq, opts ...grpc.CallOption) (*UploadResp, error) {
	out := new(UploadResp)
	err := c.cc.Invoke(ctx, "/grpcexcel.ExcelService/Upload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *excelServiceClient) List(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListResp, error) {
	out := new(ListResp)
	err := c.cc.Invoke(ctx, "/grpcexcel.ExcelService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *excelServiceClient) Open(ctx context.Context, in *OpenRq, opts ...grpc.CallOption) (*OpenResp, error) {
	out := new(OpenResp)
	err := c.cc.Invoke(ctx, "/grpcexcel.ExcelService/Open", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *excelServiceClient) Close(ctx context.Context, in *HandlerRq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/grpcexcel.ExcelService/Close", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *excelServiceClient) GetNamedCells(ctx context.Context, in *GetNamedCellsRq, opts ...grpc.CallOption) (*NamedCellsResp, error) {
	out := new(NamedCellsResp)
	err := c.cc.Invoke(ctx, "/grpcexcel.ExcelService/GetNamedCells", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *excelServiceClient) GetCells(ctx context.Context, in *GetCellsRq, opts ...grpc.CallOption) (*CellsResp, error) {
	out := new(CellsResp)
	err := c.cc.Invoke(ctx, "/grpcexcel.ExcelService/GetCells", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *excelServiceClient) SetValues(ctx context.Context, in *SetSetValuesRq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/grpcexcel.ExcelService/SetValues", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *excelServiceClient) GetMacroNames(ctx context.Context, in *ListMacrosRq, opts ...grpc.CallOption) (*ListMacrosResp, error) {
	out := new(ListMacrosResp)
	err := c.cc.Invoke(ctx, "/grpcexcel.ExcelService/GetMacroNames", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *excelServiceClient) RunMacro(ctx context.Context, in *MacroNameRq, opts ...grpc.CallOption) (*StatusMacroResp, error) {
	out := new(StatusMacroResp)
	err := c.cc.Invoke(ctx, "/grpcexcel.ExcelService/RunMacro", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExcelServiceServer is the server API for ExcelService service.
type ExcelServiceServer interface {
	Ping(context.Context, *HandlerRq) (*Empty, error)
	Upload(context.Context, *UploadRq) (*UploadResp, error)
	List(context.Context, *Empty) (*ListResp, error)
	Open(context.Context, *OpenRq) (*OpenResp, error)
	Close(context.Context, *HandlerRq) (*Empty, error)
	GetNamedCells(context.Context, *GetNamedCellsRq) (*NamedCellsResp, error)
	GetCells(context.Context, *GetCellsRq) (*CellsResp, error)
	SetValues(context.Context, *SetSetValuesRq) (*Empty, error)
	GetMacroNames(context.Context, *ListMacrosRq) (*ListMacrosResp, error)
	RunMacro(context.Context, *MacroNameRq) (*StatusMacroResp, error)
}

// UnimplementedExcelServiceServer can be embedded to have forward compatible implementations.
type UnimplementedExcelServiceServer struct {
}

func (*UnimplementedExcelServiceServer) Ping(ctx context.Context, req *HandlerRq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (*UnimplementedExcelServiceServer) Upload(ctx context.Context, req *UploadRq) (*UploadResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Upload not implemented")
}
func (*UnimplementedExcelServiceServer) List(ctx context.Context, req *Empty) (*ListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (*UnimplementedExcelServiceServer) Open(ctx context.Context, req *OpenRq) (*OpenResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Open not implemented")
}
func (*UnimplementedExcelServiceServer) Close(ctx context.Context, req *HandlerRq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Close not implemented")
}
func (*UnimplementedExcelServiceServer) GetNamedCells(ctx context.Context, req *GetNamedCellsRq) (*NamedCellsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNamedCells not implemented")
}
func (*UnimplementedExcelServiceServer) GetCells(ctx context.Context, req *GetCellsRq) (*CellsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCells not implemented")
}
func (*UnimplementedExcelServiceServer) SetValues(ctx context.Context, req *SetSetValuesRq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetValues not implemented")
}
func (*UnimplementedExcelServiceServer) GetMacroNames(ctx context.Context, req *ListMacrosRq) (*ListMacrosResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMacroNames not implemented")
}
func (*UnimplementedExcelServiceServer) RunMacro(ctx context.Context, req *MacroNameRq) (*StatusMacroResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunMacro not implemented")
}

func RegisterExcelServiceServer(s *grpc.Server, srv ExcelServiceServer) {
	s.RegisterService(&_ExcelService_serviceDesc, srv)
}

func _ExcelService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandlerRq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExcelServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcexcel.ExcelService/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExcelServiceServer).Ping(ctx, req.(*HandlerRq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExcelService_Upload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadRq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExcelServiceServer).Upload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcexcel.ExcelService/Upload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExcelServiceServer).Upload(ctx, req.(*UploadRq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExcelService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExcelServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcexcel.ExcelService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExcelServiceServer).List(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExcelService_Open_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpenRq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExcelServiceServer).Open(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcexcel.ExcelService/Open",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExcelServiceServer).Open(ctx, req.(*OpenRq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExcelService_Close_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandlerRq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExcelServiceServer).Close(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcexcel.ExcelService/Close",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExcelServiceServer).Close(ctx, req.(*HandlerRq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExcelService_GetNamedCells_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNamedCellsRq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExcelServiceServer).GetNamedCells(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcexcel.ExcelService/GetNamedCells",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExcelServiceServer).GetNamedCells(ctx, req.(*GetNamedCellsRq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExcelService_GetCells_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCellsRq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExcelServiceServer).GetCells(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcexcel.ExcelService/GetCells",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExcelServiceServer).GetCells(ctx, req.(*GetCellsRq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExcelService_SetValues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetSetValuesRq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExcelServiceServer).SetValues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcexcel.ExcelService/SetValues",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExcelServiceServer).SetValues(ctx, req.(*SetSetValuesRq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExcelService_GetMacroNames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMacrosRq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExcelServiceServer).GetMacroNames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcexcel.ExcelService/GetMacroNames",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExcelServiceServer).GetMacroNames(ctx, req.(*ListMacrosRq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExcelService_RunMacro_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MacroNameRq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExcelServiceServer).RunMacro(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcexcel.ExcelService/RunMacro",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExcelServiceServer).RunMacro(ctx, req.(*MacroNameRq))
	}
	return interceptor(ctx, in, info, handler)
}

var _ExcelService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grpcexcel.ExcelService",
	HandlerType: (*ExcelServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _ExcelService_Ping_Handler,
		},
		{
			MethodName: "Upload",
			Handler:    _ExcelService_Upload_Handler,
		},
		{
			MethodName: "List",
			Handler:    _ExcelService_List_Handler,
		},
		{
			MethodName: "Open",
			Handler:    _ExcelService_Open_Handler,
		},
		{
			MethodName: "Close",
			Handler:    _ExcelService_Close_Handler,
		},
		{
			MethodName: "GetNamedCells",
			Handler:    _ExcelService_GetNamedCells_Handler,
		},
		{
			MethodName: "GetCells",
			Handler:    _ExcelService_GetCells_Handler,
		},
		{
			MethodName: "SetValues",
			Handler:    _ExcelService_SetValues_Handler,
		},
		{
			MethodName: "GetMacroNames",
			Handler:    _ExcelService_GetMacroNames_Handler,
		},
		{
			MethodName: "RunMacro",
			Handler:    _ExcelService_RunMacro_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/grpcexcel.proto",
}
